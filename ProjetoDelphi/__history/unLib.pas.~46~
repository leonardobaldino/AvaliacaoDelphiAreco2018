unit unLib;

interface

uses
  System.Classes, FMX.Forms, System.SysUtils, FMX.Dialogs,
  FMX.TabControl, Data.DB, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.FMXUI.Wait,
  FireDAC.Comp.UI, FireDAC.Comp.Client, FireDAC.Phys.SQLite,
  FireDAC.Stan.ExprFuncs,
  FMX.Controls, FMX.StdCtrls, FMX.Layouts, FMX.Types, FMX.Objects, FMX.ListBox,
  System.Types, System.UITypes, FMX.Graphics, FMX.Colors, FMX.Pickers, inifiles,
{$IFDEF MSWINDOWS}
  Winapi.Windows, System.Rtti,
{$ENDIF MSWINDOWS}
{$IFDEF POSIX}
  Posix.Dlfcn, Posix.Fcntl, Posix.SysStat, Posix.SysTime, Posix.SysTypes,
{$ENDIF POSIX}
{$IF defined(POSIX) and not defined(IOS) and not defined(ANDROID)}
  System.Internal.Unwinder,
{$ENDIF POSIX and !IOS}
{$IFDEF MACOS}
  Macapi.Mach, Macapi.CoreServices, Macapi.CoreFoundation,
{$ENDIF MACOS}
  System.SysConst, FMX.ExtCtrls, FMX.ComboEdit, FMX.Edit, FMX.DateTimeCtrls,
  FMX.Memo,
  ShellAPI;

type
  TParameters = record
    FieldName: String;
    Value: String;
  end;

  // Impressão de Prontuarios
type
  TLib = class
  private
  public
    class function ConectDB(var SQLConn: TFDConnection): Boolean;
    class function Select(xSelect: string; xOwner: TFmxObject)
      : TFDQuery; overload;
    class function Select(xSelect: string): Variant; overload;
    class function AutoInc(campo, tabela: string): Integer;
    class function ExecutaSQL(sql: String): Integer;
    // class function FileExists(const FileName: string; FollowLink: Boolean = True): Boolean;
    class function SalvarFoto(xCaminhoFoto: String; xImagem: TImage): Integer;
    class procedure CarregarFoto(xID: Integer; xImagem: TImage);
    class procedure RemoverFoto(xImagem: TImage);
    class function Configuracao(xGrupo, xConfig: String): String;
    class procedure conversaoMonetaria(x: TEdit);
    class function Conversao(xConversao: String): Extended; overload;
    class function TrocarVirgula(xFloat: Double): String;
  end;

type
  TAcesso = class
  const
    admLogin = 'ADMINISTRADOR';
  private
  public
    class function ValidaAcesso(xModulo: String; xTela, xMsg: Boolean): Boolean;
    class function ValidarAdmin(xUser, xSenha: String): Boolean;
    class function admSenha: String;
    class function ValidarUsuario(xUser: String): Boolean;
    class function ValidarSenha(xUser, xSenha: String): Boolean;
  end;

Const
  QtdeModules = 7;
  CCLEARCLICK = 'clear.OnClick';
  CHSCROLLBAR = 'hscrollbar';
  CSEARCHCLICK = 'search.OnClick';
  CLISTCLICK = 'list.OnClick';

var
  G_SQLFields, G_SQLWhere, G_SQLOrderBy: Array of TParameters;

const
  Raiz: String = 'SOFTWARE\Wow6432Node\INFAMAT_SOCIAL';

implementation

uses unMain, Soap.EncdDecd, StrUtils, unConfigurarServidor, unDM;

{ TLib }

class function TLib.TrocarVirgula(xFloat: Double): String;
begin
  Result := FloatToStr(xFloat);
  Result := StringReplace(Result, '.', EmptyStr, [rfReplaceAll]);
  Result := StringReplace(Result, ',', '.', [rfReplaceAll]);
end;

class function TLib.AutoInc(campo, tabela: string): Integer;
var
  qryAutoInc: TFDQuery;
begin
  qryAutoInc := TFDQuery.Create(nil);
  // qryAutoInc.Connection := frmMain.FDConn;
  qryAutoInc.Close;
  with qryAutoInc.sql do
  begin
    Clear;
    Add('Select Max(' + campo + ')+1 as Cod From ' + tabela);
  end;
  qryAutoInc.Open;
  try
    Result := qryAutoInc.FieldByName('Cod').AsInteger
  except
    Result := 0;
  end;
end;

class function TLib.SalvarFoto(xCaminhoFoto: String; xImagem: TImage): Integer;
var
  LInput: TBytesStream;
  LOutput: TStringStream;
  LQry: TFDQuery;
begin
  Result := -1;
  xImagem.Bitmap.CreateFromFile(xCaminhoFoto);
  LQry := TFDQuery.Create(nil);
  LInput := TBytesStream.Create;
  try
    xImagem.Bitmap.SaveToStream(LInput);
    LInput.Position := 0;
    LOutput := TStringStream.Create('', TEncoding.ASCII);
    try
      Soap.EncdDecd.EncodeStream(LInput, LOutput);
      Result := TLib.Select('select sistema.imagem_insert(' +
        QuotedStr(LOutput.DataString) + ',' + IntToStr(frmMain.GUsuarioID) +
        ') as id');
    finally
      FreeAndNil(LOutput);
      FreeAndNil(LQry);
    end;
  finally
    FreeAndNil(LInput);
  end;
end;

class procedure TLib.CarregarFoto(xID: Integer; xImagem: TImage);
var
  LOutput: TBytesStream;
  LInput: TStringStream;
  LQry: TFDQuery;
begin
  LQry := TLib.Select('select * from sistema.imagem_view where id = ' +
    IntToStr(xID), nil);

  LInput := TStringStream.Create(LQry.FieldByName('arquivo').AsString,
    TEncoding.ASCII);
  try
    LOutput := TBytesStream.Create;
    try
      Soap.EncdDecd.DecodeStream(LInput, LOutput);
      LOutput.Position := 0;
      xImagem.Bitmap.LoadFromStream(LOutput);
    finally
      FreeAndNil(LOutput);
    end;
  finally
    FreeAndNil(LInput);
    FreeAndNil(LQry);
  end;
end;

class function TLib.ConectDB(var SQLConn: TFDConnection): Boolean;
begin
  Result := False;
  try
    SQLConn.Connected := False;
    DM.FDPhysFBDriverLink.VendorLib := 'fbclient.dll';
    SQLConn.Params.Clear;
    SQLConn.Params.Values['Server'] := Configuracao('Configuracoes', 'DBIP');
    SQLConn.Params.Values['Database'] := Configuracao('Configuracoes',
      'DBNAME');
    SQLConn.Params.Values['User_Name'] := 'sysdba';
    SQLConn.Params.Values['Password'] := '5173370';
    // SQLConn.Params.Values['VendorLib'] := ExtractFileDir(ParamStr(0)) + '\libpq.dll';
    SQLConn.Params.Values['DriverID'] := 'FB';
    SQLConn.Connected := True;
    Result := True;
  except
    on e: Exception do
    begin
      Result := False;
      ShowMessage('Falha na conexão.' + #13 + 'Entrar em contato com o suporte.'
        + #13 + e.Message);
      Application.Terminate;
    end;
  end;
end;

class function TLib.Configuracao(xGrupo, xConfig: String): String;
var
  LConfigFile: TIniFile;
  LStr, LPath: String;
begin
  LPath := ExtractFilePath(ParamStr(0)) + 'sys\config.system';
  LConfigFile := TIniFile.Create(LPath);
  try
    LStr := LConfigFile.ReadString(xGrupo, xConfig, EmptyStr);
    Result := LStr;
  finally
    FreeAndNil(LConfigFile);
  end;
end;

class function TLib.Conversao(xConversao: String): Extended;
var
  x: Integer;
  Conversao1: String;
begin
  if Trim(xConversao) = '' then
    xConversao := '0';
  Conversao1 := '';
  for x := 1 to Length(xConversao) do
    if (Copy(xConversao, x, 1) >= '0') and (Copy(xConversao, x, 1) <= '9') and
      (Copy(xConversao, x, 1) <> '.') or (Copy(xConversao, x, 1) = ',') or
      (Copy(xConversao, x, 1) = '-') then
      Conversao1 := Conversao1 + Copy(xConversao, x, 1);
  Conversao := StrToFloat(Conversao1);
end;

class procedure TLib.conversaoMonetaria(x: TEdit);
var
  cont, cont2: Integer;
begin
  cont2 := Length(x.Text);
  x.Text := StringReplace(x.Text, ',', EmptyStr, [rfReplaceAll]);
  x.Text := StringReplace(x.Text, '.', EmptyStr, [rfReplaceAll]);
  cont := Length(x.Text);
  if cont <= 2 then
  begin
    if cont = 2 then
    begin
      x.Text := FormatFloat('#,###,##0.00', Conversao('0,' + x.Text));
      cont2 := cont2 + 5;
    end;
    if cont = 1 then
    begin
      x.Text := FormatFloat('#,###,###0.000', Conversao('0,00' + x.Text));
      cont2 := cont2 + 5;
    end;
  end
  else
  begin
    x.Text := FormatFloat('#,###,###0.000',
      Conversao(Copy(x.Text, 1, cont - 3) + ',' + Copy(x.Text, cont - 2, 3)));
  end;
  x.SelStart := cont2 + 5;
end;

class function TLib.DataHoraServidor: TDateTime;
var
  LQry: TFDQuery;
begin
  LQry := TLib.Select('select now() as datahora', nil);
  try
    Result := LQry.FieldByName('datahora').AsDateTime;
  finally
    FreeAndNil(LQry);
  end;
end;

class function TLib.DataServidor: TDate;
var
  LQry: TFDQuery;
begin
  LQry := TLib.Select('select now() as datahora', nil);
  try
    Result := LQry.FieldByName('datahora').AsDateTime;
  finally
    FreeAndNil(LQry);
  end;
end;

class function TLib.ExecutaSQL(sql: String): Integer;
var
  Qry: TFDQuery;
begin
  Qry := TFDQuery.Create(nil);
  try
    Qry.Connection := DM.FDConnection;
    Qry.Close;
    Qry.sql.Clear;
    Qry.sql.Add(sql);
    Qry.ExecSQL;
    Result := Qry.RowsAffected;
  finally
    FreeAndNil(Qry);
  end;
end;

class function TLib.GeraCodigoImpressao(xListBoxList: TListBox): String;
var
  LID: String;
  LIdx: Integer;
begin
  inherited;
  LID := EmptyStr;
  for LIdx := 0 to xListBoxList.Items.Count - 1 do
  begin
    if LIdx = 0 then
    begin
      LID := xListBoxList.ItemByIndex(LIdx).StylesData['id'].AsString;
    end
    else
    begin
      LID := LID + '_' + xListBoxList.ItemByIndex(LIdx).StylesData
        ['id'].AsString;
    end;
  end;

  Result := LID;
end;

// class function TLib.FileExists(const FileName: string; FollowLink: Boolean): Boolean;
// {$IFDEF MSWINDOWS}
// function ExistsLockedOrShared(const FileName: string): Boolean;
// var
// FindData: TWin32FindData;
// LHandle: THandle;
// begin
// { Either the file is locked/share_exclusive or we got an access denied }
// LHandle := FindFirstFile(PChar(LowerCase(FileName)), FindData);
// if LHandle <> INVALID_HANDLE_VALUE then
// begin
// Winapi.Windows.FindClose(LHandle);
// Result := FindData.dwFileAttributes and FILE_ATTRIBUTE_DIRECTORY = 0;
// end
// else
// Result := False;
// end;
//
// var
// Flags: Cardinal;
// Handle: THandle;
// LastError: Cardinal;
// begin
// Flags := GetFileAttributes(PChar(LowerCase(FileName)));
//
// if Flags <> INVALID_FILE_ATTRIBUTES then
// begin
// if faSymLink and Flags <> 0 then
// begin
// if not FollowLink then
// Exit(True)
// else
// begin
// if faDirectory and Flags <> 0 then
// Exit(False)
// else
// begin
// Handle := CreateFile(PChar(LowerCase(FileName)), GENERIC_READ, FILE_SHARE_READ, nil, OPEN_EXISTING, 0, 0);
// if Handle <> INVALID_HANDLE_VALUE then
// begin
// CloseHandle(Handle);
// Exit(True);
// end;
// LastError := GetLastError;
// Exit(LastError = ERROR_SHARING_VIOLATION);
// end;
// end;
// end;
//
// Exit(faDirectory and Flags = 0);
// end;
//
// LastError := GetLastError;
// Result := (LastError <> ERROR_FILE_NOT_FOUND) and (LastError <> ERROR_PATH_NOT_FOUND) and (LastError <> ERROR_INVALID_NAME) and
// ExistsLockedOrShared(LowerCase(FileName));
// end;
// {$ENDIF MSWINDOWS}
// {$IFDEF POSIX}
//
// var
// StatBuf: _stat;
// M: TMarshaller;
// begin
// if lstat(M.AsAnsi(LowerCase(FileName), CP_UTF8).ToPointer, StatBuf) = 0 then
// begin
// if S_ISLNK(StatBuf.st_mode) then
// begin
// if not FollowLink then
// Exit(True)
// else
// begin
// if stat(M.AsAnsi(LowerCase(FileName), CP_UTF8).ToPointer, StatBuf) = 0 then
// Exit(not S_ISDIR(StatBuf.st_mode));
// Exit(False);
// end;
// end;
//
// Exit(not S_ISDIR(StatBuf.st_mode));
// end;
//
// Result := False;
// end;
// {$ENDIF POSIX}

class procedure TLib.ImprimirRelatorio(xConsulta, xRelatorio, xTitulo: String);
var
  LRelatorioExe: String;
begin
  LRelatorioExe := Configuracao('Configuracoes', 'REPORT_EXE_PATH');
  ShellExecute(0, 'open',
    PChar(LRelatorioExe + '\InfamatV5_SocialXE5_Relatorios.exe'),
    PChar('-' + xConsulta + ' ' + '-' + xRelatorio + ' ' + '-' + xTitulo), '',
    SW_SHOWNORMAL);
end;

class function TLib.isCPF(CPF: string): Boolean;
var
  dig10, dig11: string;
  s, i, r, peso: Integer;
begin
  // length - retorna o tamanho da string do CPF (CPF é um número formado por 11 dígitos)
  if ((CPF = '00000000000') or (CPF = '11111111111') or (CPF = '22222222222') or
    (CPF = '33333333333') or (CPF = '44444444444') or (CPF = '55555555555') or
    (CPF = '66666666666') or (CPF = '77777777777') or (CPF = '88888888888') or
    (CPF = '99999999999') or (Length(CPF) <> 11)) then
  begin
    isCPF := False;
    Exit;
  end;

  // "try" - protege o código para eventuais erros de conversão de tipo através da função "StrToInt"
  try
    { *-- Cálculo do 1o. Digito Verificador --* }
    s := 0;
    peso := 10;
    for i := 1 to 9 do
    begin
      // StrToInt converte o i-ésimo caractere do CPF em um número
      s := s + (StrToInt(CPF[i]) * peso);
      peso := peso - 1;
    end;
    r := 11 - (s mod 11);
    if ((r = 10) or (r = 11)) then
      dig10 := '0'
    else
      str(r: 1, dig10); // converte um número no respectivo caractere numérico

    { *-- Cálculo do 2o. Digito Verificador --* }
    s := 0;
    peso := 11;
    for i := 1 to 10 do
    begin
      s := s + (StrToInt(CPF[i]) * peso);
      peso := peso - 1;
    end;
    r := 11 - (s mod 11);
    if ((r = 10) or (r = 11)) then
      dig11 := '0'
    else
      str(r: 1, dig11);

    { Verifica se os digitos calculados conferem com os digitos informados. }
    if ((dig10 = CPF[10]) and (dig11 = CPF[11])) then
      isCPF := True
    else
      isCPF := False;
  except
    isCPF := False
  end;
end;

class function TLib.isNumero(xStr: String): Boolean;
begin
  // Result := False;
  try
    StrToInt(xStr);
    Result := True;
  except
    Result := False;
  end;
end;

class procedure TLib.LimparEdit(Frame: TFrame);
var
  LIdx: Integer;
  LComponent: TComponent;
begin
  for LIdx := 0 to Frame.ComponentCount - 1 do
  begin
    LComponent := Frame.Components[LIdx];
    if LComponent is TEdit then
    begin
      TEdit(LComponent).Text := EmptyStr;
    end
    else if LComponent is TDateEdit then
    begin
      TDateEdit(LComponent).Date := TLib.DataServidor;
    end
    else if LComponent is TCheckBox then
    begin
      TCheckBox(LComponent).IsChecked := False;
    end
    else if LComponent is TMemo then
    begin
      TMemo(LComponent).Lines.Clear;
    end
    else if LComponent is TPopupBox then
    begin
      TPopupBox(LComponent).ItemIndex := -1;
    end;
  end;
end;

class procedure TLib.ListBoxClear(xListBox: TListBox);
var
  LItem: TListBoxItem;
  LIdx: Integer;
begin
  while xListBox.Items.Count <> 0 do
  begin
    for LIdx := 0 to xListBox.Items.Count - 1 do
    begin
      LItem := xListBox.ItemByIndex(LIdx);
      LItem.Free;
    end;
  end;
end;

class procedure TLib.LoadComboBox(xQry: TFDQuery; xComboBox: TComboBox);
begin
  xQry.First;
  xComboBox.Items.Clear;
  while not xQry.Eof do
  begin
    xComboBox.Items.Add(xQry.Fields[1].AsString);
    xComboBox.StylesData['id'] := xQry.Fields[0].AsString;
    xQry.Next;
  end;
end;

class function TLib.LocalizarItemComboEdit(xComboEdit: TComboEdit;
  xSelect: String): Integer;
var
  LCount: Integer;
  LQry: TFDQuery;
begin
  Result := -1;
  LQry := Select(xSelect, nil);
  try
    for LCount := 0 to xComboEdit.Items.Count - 1 do
    begin
      if xComboEdit.Items.Strings[LCount] = LQry.Fields[0].AsString then
      begin
        Result := LCount;
        Break;
      end;
    end;
  finally
    FreeAndNil(LQry);
  end;
end;

class function TLib.LocalizarItemID(xSelect: String): Integer;
var
  LQry: TFDQuery;
begin
  // Result := -1;
  LQry := Select(xSelect, nil);
  try
    if LQry.IsEmpty then
      Result := -1
    else
      Result := LQry.FieldByName('id').AsInteger;
  finally
    FreeAndNil(LQry);
  end;
end;

class function TLib.LocalizarItemPopupBox(xPopupBox: TPopupBox;
  xSelect: String): Integer;
var
  LCount: Integer;
  LQry: TFDQuery;
begin
  Result := -1;
  LQry := Select(xSelect, nil);
  try
    for LCount := 0 to xPopupBox.Items.Count - 1 do
    begin
      if xPopupBox.Items.Strings[LCount] = LQry.Fields[0].AsString then
      begin
        Result := LCount;
        Break;
      end;
    end;
  finally
    FreeAndNil(LQry);
  end;
end;

class function TLib.Mascara(edt, str: String): string;
var
  i: Integer;
begin
  for i := 1 to Length(edt) do
  begin
    if (str[i] = '9') and not(AnsiChar(edt[i]) in ['0' .. '9']) and
      (Length(edt) = Length(str) + 1) then
      delete(edt, i, 1);
    if (str[i] <> '9') and (AnsiChar(edt[i]) in ['0' .. '9']) then
      insert(str[i], edt, i);
  end;
  Result := edt;
end;

class procedure TLib.MascaraCPF(xEdit: TEdit);
var
  LCPF: String;
begin
  LCPF := TLib.SomenteNumero(xEdit.Text);
  if Length(LCPF) <= 11 then
  begin
    xEdit.Text := TLib.Mascara(xEdit.Text, '999.999.999-99');
    xEdit.SelStart := Length(xEdit.Text);
  end;
end;

class procedure TLib.MascaraData(xEdit: TEdit);
begin
  xEdit.Text := TLib.Mascara(xEdit.Text, '99/99/9999');
  xEdit.SelStart := Length(xEdit.Text);
end;

class procedure TLib.MascaraHora(xEdit: TEdit);
var
  LHora: string;
begin
  LHora := Trim(SomenteNumero(xEdit.Text));
  if Length(LHora) in [1, 2, 3, 4] then
  begin
    case Length(LHora) of
      1:
        xEdit.Text := '0' + LHora + '00';
      2:
        xEdit.Text := LHora + '00';
      3:
        xEdit.Text := LHora + '0';
    end;
    xEdit.Text := TLib.Mascara(xEdit.Text, '99:99');
    xEdit.SelStart := Length(xEdit.Text);
  end;
end;

class function TLib.OpenTable(xQry: TFDQuery): Boolean;
begin
  try
    xQry.Close;
    xQry.Open;
    Result := xQry.Active;
  except
    Result := False;
  end;
end;

class function TLib.Procura(xFiltros: TStringlist;
  xLocal, xFiltroUnico: String): Boolean;
var
  LCount: Integer;
begin
  Result := False;
  if Assigned(xFiltros) then
  begin
    for LCount := 0 to xFiltros.Count - 1 do
    begin
      if AnsiContainsText(Soundex(xLocal), Soundex(xFiltros[LCount])) or
        AnsiContainsText(xLocal, xFiltros[LCount]) then
      begin
        Result := True;
        Exit;
      end;
    end;
  end
  else
  begin
    if AnsiContainsText(Soundex(xLocal), Soundex(xFiltroUnico)) or
      AnsiContainsText(xLocal, xFiltroUnico) then
    begin
      Result := True;
      Exit;
    end;
  end;
end;

class procedure TLib.RemoverFoto(xImagem: TImage);
begin
  xImagem.Bitmap.LoadFromFile(ExtractFileDir(ParamStr(0)) +
    '\imagens\Image-icon128x128.png');
end;

class procedure TLib.SearchListBox(xText, xText2: string; xList: TListBox);
var
  LIdx: Integer;
begin
  if xText = EmptyStr then
  begin
    xList.ItemIndex := 0;
    Exit;
  end;

  for LIdx := 0 to xList.Items.Count - 1 do
  begin
    xList.ItemIndex := LIdx;
    if Pos(AnsiUpperCase(xText),
      AnsiUpperCase(xList.Selected.StylesData[xText2].AsString)) > 0 then
    begin
      Break;
    end;
  end; // for LIdx := 0 to ListBoxList.Items.Count-1 do
end;

class procedure TLib.SelecionarPopupBoxItemBoolean(xCondicao: Boolean;
  xPopupBox: TPopupBox);
begin
  if xCondicao then
    xPopupBox.ItemIndex := 1
  else
    xPopupBox.ItemIndex := 0;
end;

class function TLib.Select(xTabela, xCampoSelect, xCampoOrderBy,
  xValorWhere: string): Integer;
var
  LQry: TFDQuery;
begin
  // Result := -1;
  LQry := TFDQuery.Create(nil);
  try
    LQry.Connection := DM.FDConnection;
    LQry.Close;
    LQry.sql.Clear;
    LQry.sql.Text := 'select ' + xCampoSelect + ' from ' + xTabela + ' where ' +
      xCampoOrderBy + ' = ' + xValorWhere;
    LQry.Open;
    if LQry.IsEmpty then
      Result := -1
    else
      Result := LQry.FieldByName(xCampoSelect).AsInteger;
  finally
    FreeAndNil(LQry);
  end;
end;

class function TLib.Select(xSelect: string): Variant;
var
  LQry: TFDQuery;
begin
  Result := EmptyStr;
  LQry := TFDQuery.Create(nil);
  try
    LQry.Connection := DM.FDConnection;
    LQry.Close;
    LQry.sql.Clear;
    LQry.sql.Text := xSelect;
    LQry.Open;
    if not LQry.IsEmpty then
    begin
      Result := LQry.Fields[0].AsString;
    end;
  finally
    FreeAndNil(LQry);
  end;
end;

class function TLib.Select(xSelect: string; xOwner: TFmxObject): TFDQuery;
begin
  try
    Result := TFDQuery.Create(nil);
    Result.Connection := DM.FDConnection;
    Result.Transaction := DM.FDTransaction;
    Result.sql.Clear;
    Result.sql.Add(xSelect);
    Result.Open;
  except
    on e: Exception do
    begin
      MessageDlg('Entrar em contato com o suporte.' + #13 + e.Message,
        TMsgDlgType.mtError, [TMsgDlgBtn.mbOK], 0);
      Result := nil;
    end;
  end;
end;

class function TLib.Select(P_Qry: TFDQuery;
  P_SQLWhere, P_SQLFields, P_SQLOrderBy: array of TParameters;
  P_Table: String): Integer;
var
  i, tam: Integer;
begin
  Result := -1;
  try
    with P_Qry do
    begin
      Close;
      with sql do
      begin
        Clear;
        Add('Select ');
        tam := Length(P_SQLFields);
        if tam = 0 then
          Add(' * ')
        else
          for i := 0 to tam - 1 do
          begin
            if i < tam - 1 then
              Add(P_SQLFields[i].FieldName + ', ')
            else
              Add(P_SQLFields[i].FieldName);
          end; // for i := 1 to Length(P_SQLWhere) do

        Add('From ' + P_Table + ' ');

        tam := Length(P_SQLWhere);
        if tam > 0 then
        begin
          Add('Where ');
          for i := 0 to tam - 1 do
          begin
            if i < tam - 1 then
              Add(P_SQLWhere[i].FieldName + ' = ' + P_SQLWhere[i].Value
                + ' and ')
            else
              Add(P_SQLWhere[i].FieldName + ' = ' + P_SQLWhere[i].Value + ' ')
          end;
        end; // if Length(P_SQLWhere) > 0 then

        tam := Length(P_SQLOrderBy);
        if tam > 0 then
        begin
          Add('Order by ');
          for i := 0 to tam - 1 do
          begin
            if i < tam - 1 then
              Add(P_SQLOrderBy[i].FieldName + ', ')
            else
              Add(P_SQLOrderBy[i].FieldName)
          end;
        end; // if Length(P_SQLWhere) > 0 then
      end; // with SQL do
      Open;
    end; // with P_Qry do
  except
    on e: Exception do
    begin
      ShowMessage(e.Message);
      Abort;
    end;
  end;
end;

class function TLib.SetSQLFields(P_Reset: Boolean): Integer;
begin
  if P_Reset then
    SetLength(G_SQLFields, 1)
  else
    SetLength(G_SQLFields, Length(G_SQLFields) + 1);

  Result := Length(G_SQLFields);
end;

class function TLib.SetSQLOrderBy(P_Reset: Boolean): Integer;
begin
  if P_Reset then
    SetLength(G_SQLOrderBy, 1)
  else
    SetLength(G_SQLOrderBy, Length(G_SQLOrderBy) + 1);

  Result := Length(G_SQLOrderBy);
end;

class function TLib.SetSQLWhere(P_Reset: Boolean): Integer;
begin
  if P_Reset then
    SetLength(G_SQLWhere, 1)
  else
    SetLength(G_SQLWhere, Length(G_SQLWhere) + 1);

  Result := Length(G_SQLWhere);
end;

class function TLib.SomenteNumero(xStr: String): String;
begin
  Result := EmptyStr;
  Result := StringReplace(xStr, '.', EmptyStr, [rfReplaceAll]);
  Result := StringReplace(Result, '-', EmptyStr, [rfReplaceAll]);
  Result := StringReplace(Result, ':', EmptyStr, [rfReplaceAll]);
end;

class function TLib.TrocarVirgula(xFloat: Double): String;
begin
  Result := FloatToStr(xFloat);
  Result := StringReplace(Result, '.', EmptyStr, [rfReplaceAll]);
  Result := StringReplace(Result, ',', '.', [rfReplaceAll]);
end;

class procedure TLib.ValidaCPF(Sender: TObject);
var
  LCPF: String;
begin
  LCPF := TLib.SomenteNumero(TEdit(Sender).Text);
  inherited;
  if LCPF <> EmptyStr then
  begin
    if not TLib.isCPF(LCPF) then
    begin
      MessageDlg('CPF inválido.', TMsgDlgType.mtError, [TMsgDlgBtn.mbOK], 0);
      TEdit(Sender).SetFocus;
      Abort;
    end;
  end;
end;

class function TLib.ValidaData(Sender: TObject): Boolean;
begin
  Result := True;
  if Trim(TEdit(Sender).Text) <> EmptyStr then
  begin
    try
      StrToDate(TEdit(Sender).Text);
    except
      MessageDlg('Data inválida.', TMsgDlgType.mtError, [TMsgDlgBtn.mbOK], 0);
      TEdit(Sender).SetFocus;
      Result := False;
      Abort;
    end;
  end;
end;

class function TLib.ValidaHora(Sender: TObject): Boolean;
begin
  Result := True;
  try
    StrToTime(TEdit(Sender).Text);
  except
    MessageDlg('Hora inválida.', TMsgDlgType.mtError, [TMsgDlgBtn.mbOK], 0);
    Result := False;
    TEdit(Sender).SetFocus;
    Abort;
  end;
end;

class function TLib.VersaoExe: String;
type
  PFFI = ^vs_FixedFileInfo;
var
  F: PFFI;
  Handle: Dword;
  Len: Longint;
  Data: PChar;
  Buffer: Pointer;
  Tamanho: Dword;
  Parquivo: PChar;
  Arquivo: String;
begin
  Arquivo := ExtractFileName(ParamStr(0));
  Parquivo := StrAlloc(Length(Arquivo) + 1);
  StrPcopy(Parquivo, Arquivo);
  Len := GetFileVersionInfoSize(Parquivo, Handle);
  Result := '';
  if Len > 0 then
  begin
    Data := StrAlloc(Len + 1);
    if GetFileVersionInfo(Parquivo, Handle, Len, Data) then
    begin
      VerQueryValue(Data, '', Buffer, Tamanho);
      F := PFFI(Buffer);
      Result := Format('%d.%d.%d.%d', [HiWord(F^.dwFileVersionMs),
        LoWord(F^.dwFileVersionMs), HiWord(F^.dwFileVersionLs),
        LoWord(F^.dwFileVersionLs)]);
    end;
    StrDispose(Data);
  end;
  StrDispose(Parquivo);
end;

{ TAcesso }

class function TAcesso.admSenha: String;
var
  senha: String;
  contador, verificador, cont: Integer;
begin
  contador := 0;
  verificador := 0;
  senha := FormatDateTime('yyyymmddhh', now);
  for cont := 1 to 10 do
  begin
    contador := contador + StrToInt(Copy(senha, cont, 1));
    verificador := verificador + (StrToInt(Copy(senha, cont, 1)) * cont *
      contador);
  end;
  senha := IntToStr(verificador) + IntToStr(contador);
  for cont := 1 to Length(senha) do
  begin
    contador := contador + StrToInt(Copy(senha, cont, 1));
    verificador := verificador + (StrToInt(Copy(senha, cont, 1)) * cont *
      contador);
  end;
  senha := IntToStr(verificador) + IntToStr(contador);
  for cont := 1 to Length(senha) do
  begin
    contador := contador + StrToInt(Copy(senha, cont, 1));
    verificador := verificador + (StrToInt(Copy(senha, cont, 1)) * cont *
      contador);
  end;
  senha := IntToStr(verificador) + IntToStr(contador);
  // Result := dm.CriptoAcesso.EncodeString(dm.CriptoAcesso.Key,senha);
  Result := senha;
end;

class function TAcesso.ValidaAcesso(xModulo: String;
  xTela, xMsg: Boolean): Boolean;
var
  LAchou: Integer;
  LModulo: String;
begin
  if frmMain.GUsuarioNome = TAcesso.admLogin then
  begin
    Result := True;
  end
  else
  begin
    Result := False;
    LModulo := UpperCase(xModulo);

    if xTela then
    begin
      LAchou := TLib.Select('SELECT coalesce(sistema.usuario_valida_acesso(' +
        IntToStr(frmMain.GUsuarioID) + ',' + QuotedStr(LModulo) +
        ',true),0) as id');
    end
    else
    begin
      LAchou := TLib.Select('SELECT coalesce(sistema.usuario_valida_acesso(' +
        IntToStr(frmMain.GUsuarioID) + ',' + QuotedStr(LModulo) +
        ',false),0) as id');
    end;

    if LAchou = 0 then
    begin
      Result := False;
      if xMsg then
        MessageDlg('Usuário não possui acesso liberado para acessar o modulo: '
          + #13 + xModulo, TMsgDlgType.mtError, [TMsgDlgBtn.mbOK], 0);
    end
    else
    begin
      Result := True;
    end;
  end;
end;

class function TAcesso.ValidarSenha(xUser, xSenha: String): Boolean;
var
  LAchou: Integer;
begin
  Result := False;

  LAchou := TLib.Select
    ('select count(id) from sistema.usuario_view where usuario_nome = ' +
    QuotedStr(xUser) + ' and usuario_senha = ' + QuotedStr(xSenha));
  if LAchou = 0 then
  begin
    MessageDlg('Senha invalida.', TMsgDlgType.mtError, [TMsgDlgBtn.mbOK], 0);
  end
  else
  begin
    Result := True;
  end;
end;

class function TAcesso.ValidarUsuario(xUser: String): Boolean;
var
  LAchou: Integer;
begin
  Result := False;

  if xUser <> TAcesso.admLogin then
  begin
    LAchou := TLib.Select
      ('select count(id) from sistema.usuario_view where usuario_nome = ' +
      QuotedStr(xUser));
    if LAchou = 0 then
    begin
      MessageDlg('Usuário não encontrado.', TMsgDlgType.mtError,
        [TMsgDlgBtn.mbOK], 0);
    end
    else
    begin
      Result := True;
    end;
  end
  else
  begin
    Result := True;
  end;
end;

class function TAcesso.ValidarAdmin(xUser, xSenha: String): Boolean;
var
  LAchou: Integer;
begin
  if xSenha = admSenha then
  begin
    Result := True;
  end
  else
  begin
    Result := False;
    MessageDlg('Senha invalida.', TMsgDlgType.mtError, [TMsgDlgBtn.mbOK], 0);
  end;
end;

end.
